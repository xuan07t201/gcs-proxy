apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  name: gcs-proxy-go
  annotations:
    run.googleapis.com/ingress: all
    run.googleapis.com/execution-environment: gen2
    # Cost optimization annotations
    run.googleapis.com/cpu-throttling: "true"
    run.googleapis.com/startup-cpu-boost: "true"
  labels:
    app: gcs-proxy
    version: go
    environment: production
spec:
  template:
    metadata:
      annotations:
        # Aggressive scaling for cost optimization
        autoscaling.knative.dev/maxScale: "10"
        autoscaling.knative.dev/minScale: "0"
        autoscaling.knative.dev/scaleDownDelay: "30s"
        autoscaling.knative.dev/scaleToZeroGracePeriod: "30s"
        
        # Performance settings
        run.googleapis.com/execution-environment: gen2
        run.googleapis.com/cpu-throttling: "true"
        run.googleapis.com/startup-cpu-boost: "true"
        
    spec:
      # High concurrency - Go handles it well
      containerConcurrency: 1000
      timeoutSeconds: 60
      
      containers:
      - image: gcr.io/PROJECT_ID/gcs-proxy-go:latest
        ports:
        - name: http1
          containerPort: 8080
        
        env:
        - name: GOOGLE_CLOUD_PROJECT_ID
          value: "PROJECT_ID"
        - name: GCS_BUCKET_NAME
          value: "BUCKET_NAME"
        - name: PORT
          value: "8080"
        - name: GIN_MODE
          value: "release"
        
        resources:
          limits:
            # Minimal resources - Go is very efficient
            cpu: "0.5"
            memory: "128Mi"
          requests:
            cpu: "0.1"
            memory: "64Mi"
        
        # Optimized health checks for Go speed
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
            httpHeaders:
            - name: User-Agent
              value: "GoogleHC/1.0"
          initialDelaySeconds: 2
          periodSeconds: 30
          timeoutSeconds: 2
          failureThreshold: 3
          successThreshold: 1
          
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
            httpHeaders:
            - name: User-Agent
              value: "GoogleHC/1.0"
          initialDelaySeconds: 1
          periodSeconds: 10
          timeoutSeconds: 2
          failureThreshold: 3
          successThreshold: 1
          
        # Startup probe for initial container readiness
        startupProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 1
          timeoutSeconds: 2
          failureThreshold: 10
          successThreshold: 1
          
  traffic:
  - percent: 100
    latestRevision: true